#ifndef _ALTERA_SYSTEM_H_
#define _ALTERA_SYSTEM_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'HPS' in
 * file 'hardware/_HPS/HPS.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following master:
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'va_data_ready', class 'altera_avalon_pio'
 * The macros are prefixed with 'VA_DATA_READY_'.
 * The prefix is the slave descriptor.
 */
#define VA_DATA_READY_COMPONENT_TYPE altera_avalon_pio
#define VA_DATA_READY_COMPONENT_NAME va_data_ready
#define VA_DATA_READY_BASE 0x0
#define VA_DATA_READY_SPAN 16
#define VA_DATA_READY_END 0xf
#define VA_DATA_READY_IRQ 1
#define VA_DATA_READY_BIT_CLEARING_EDGE_REGISTER 0
#define VA_DATA_READY_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VA_DATA_READY_CAPTURE 1
#define VA_DATA_READY_DATA_WIDTH 1
#define VA_DATA_READY_DO_TEST_BENCH_WIRING 0
#define VA_DATA_READY_DRIVEN_SIM_VALUE 0
#define VA_DATA_READY_EDGE_TYPE RISING
#define VA_DATA_READY_FREQ 50000000
#define VA_DATA_READY_HAS_IN 1
#define VA_DATA_READY_HAS_OUT 0
#define VA_DATA_READY_HAS_TRI 0
#define VA_DATA_READY_IRQ_TYPE EDGE
#define VA_DATA_READY_RESET_VALUE 0

/*
 * Macros for device 'va_dataout', class 'altera_avalon_pio'
 * The macros are prefixed with 'VA_DATAOUT_'.
 * The prefix is the slave descriptor.
 */
#define VA_DATAOUT_COMPONENT_TYPE altera_avalon_pio
#define VA_DATAOUT_COMPONENT_NAME va_dataout
#define VA_DATAOUT_BASE 0x10
#define VA_DATAOUT_SPAN 16
#define VA_DATAOUT_END 0x1f
#define VA_DATAOUT_BIT_CLEARING_EDGE_REGISTER 0
#define VA_DATAOUT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VA_DATAOUT_CAPTURE 0
#define VA_DATAOUT_DATA_WIDTH 32
#define VA_DATAOUT_DO_TEST_BENCH_WIRING 0
#define VA_DATAOUT_DRIVEN_SIM_VALUE 0
#define VA_DATAOUT_EDGE_TYPE NONE
#define VA_DATAOUT_FREQ 50000000
#define VA_DATAOUT_HAS_IN 1
#define VA_DATAOUT_HAS_OUT 0
#define VA_DATAOUT_HAS_TRI 0
#define VA_DATAOUT_IRQ_TYPE NONE
#define VA_DATAOUT_RESET_VALUE 0

/*
 * Macros for device 'hdmi_pio_ready', class 'altera_avalon_pio'
 * The macros are prefixed with 'HDMI_PIO_READY_'.
 * The prefix is the slave descriptor.
 */
#define HDMI_PIO_READY_COMPONENT_TYPE altera_avalon_pio
#define HDMI_PIO_READY_COMPONENT_NAME hdmi_pio_ready
#define HDMI_PIO_READY_BASE 0x20
#define HDMI_PIO_READY_SPAN 16
#define HDMI_PIO_READY_END 0x2f
#define HDMI_PIO_READY_BIT_CLEARING_EDGE_REGISTER 0
#define HDMI_PIO_READY_BIT_MODIFYING_OUTPUT_REGISTER 0
#define HDMI_PIO_READY_CAPTURE 0
#define HDMI_PIO_READY_DATA_WIDTH 1
#define HDMI_PIO_READY_DO_TEST_BENCH_WIRING 0
#define HDMI_PIO_READY_DRIVEN_SIM_VALUE 0
#define HDMI_PIO_READY_EDGE_TYPE NONE
#define HDMI_PIO_READY_FREQ 50000000
#define HDMI_PIO_READY_HAS_IN 0
#define HDMI_PIO_READY_HAS_OUT 1
#define HDMI_PIO_READY_HAS_TRI 0
#define HDMI_PIO_READY_IRQ_TYPE NONE
#define HDMI_PIO_READY_RESET_VALUE 0

/*
 * Macros for device 'hdmi_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'HDMI_PIO_'.
 * The prefix is the slave descriptor.
 */
#define HDMI_PIO_COMPONENT_TYPE altera_avalon_pio
#define HDMI_PIO_COMPONENT_NAME hdmi_pio
#define HDMI_PIO_BASE 0x30
#define HDMI_PIO_SPAN 16
#define HDMI_PIO_END 0x3f
#define HDMI_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define HDMI_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define HDMI_PIO_CAPTURE 0
#define HDMI_PIO_DATA_WIDTH 32
#define HDMI_PIO_DO_TEST_BENCH_WIRING 0
#define HDMI_PIO_DRIVEN_SIM_VALUE 0
#define HDMI_PIO_EDGE_TYPE NONE
#define HDMI_PIO_FREQ 50000000
#define HDMI_PIO_HAS_IN 0
#define HDMI_PIO_HAS_OUT 1
#define HDMI_PIO_HAS_TRI 0
#define HDMI_PIO_IRQ_TYPE NONE
#define HDMI_PIO_RESET_VALUE 0

/*
 * Macros for device 'va_gen_sm', class 'altera_avalon_pio'
 * The macros are prefixed with 'VA_GEN_SM_'.
 * The prefix is the slave descriptor.
 */
#define VA_GEN_SM_COMPONENT_TYPE altera_avalon_pio
#define VA_GEN_SM_COMPONENT_NAME va_gen_sm
#define VA_GEN_SM_BASE 0x40
#define VA_GEN_SM_SPAN 16
#define VA_GEN_SM_END 0x4f
#define VA_GEN_SM_BIT_CLEARING_EDGE_REGISTER 0
#define VA_GEN_SM_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VA_GEN_SM_CAPTURE 0
#define VA_GEN_SM_DATA_WIDTH 32
#define VA_GEN_SM_DO_TEST_BENCH_WIRING 0
#define VA_GEN_SM_DRIVEN_SIM_VALUE 0
#define VA_GEN_SM_EDGE_TYPE NONE
#define VA_GEN_SM_FREQ 50000000
#define VA_GEN_SM_HAS_IN 0
#define VA_GEN_SM_HAS_OUT 1
#define VA_GEN_SM_HAS_TRI 0
#define VA_GEN_SM_IRQ_TYPE NONE
#define VA_GEN_SM_RESET_VALUE 0

/*
 * Macros for device 'led_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'LED_PIO_'.
 * The prefix is the slave descriptor.
 */
#define LED_PIO_COMPONENT_TYPE altera_avalon_pio
#define LED_PIO_COMPONENT_NAME led_pio
#define LED_PIO_BASE 0x3000
#define LED_PIO_SPAN 16
#define LED_PIO_END 0x300f
#define LED_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define LED_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LED_PIO_CAPTURE 0
#define LED_PIO_DATA_WIDTH 8
#define LED_PIO_DO_TEST_BENCH_WIRING 0
#define LED_PIO_DRIVEN_SIM_VALUE 0
#define LED_PIO_EDGE_TYPE NONE
#define LED_PIO_FREQ 50000000
#define LED_PIO_HAS_IN 0
#define LED_PIO_HAS_OUT 1
#define LED_PIO_HAS_TRI 0
#define LED_PIO_IRQ_TYPE NONE
#define LED_PIO_RESET_VALUE 127

/*
 * Macros for device 'dipsw_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'DIPSW_PIO_'.
 * The prefix is the slave descriptor.
 */
#define DIPSW_PIO_COMPONENT_TYPE altera_avalon_pio
#define DIPSW_PIO_COMPONENT_NAME dipsw_pio
#define DIPSW_PIO_BASE 0x4000
#define DIPSW_PIO_SPAN 16
#define DIPSW_PIO_END 0x400f
#define DIPSW_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define DIPSW_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DIPSW_PIO_CAPTURE 1
#define DIPSW_PIO_DATA_WIDTH 4
#define DIPSW_PIO_DO_TEST_BENCH_WIRING 0
#define DIPSW_PIO_DRIVEN_SIM_VALUE 0
#define DIPSW_PIO_EDGE_TYPE ANY
#define DIPSW_PIO_FREQ 50000000
#define DIPSW_PIO_HAS_IN 1
#define DIPSW_PIO_HAS_OUT 0
#define DIPSW_PIO_HAS_TRI 0
#define DIPSW_PIO_IRQ_TYPE NONE
#define DIPSW_PIO_RESET_VALUE 0

/*
 * Macros for device 'button_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'BUTTON_PIO_'.
 * The prefix is the slave descriptor.
 */
#define BUTTON_PIO_COMPONENT_TYPE altera_avalon_pio
#define BUTTON_PIO_COMPONENT_NAME button_pio
#define BUTTON_PIO_BASE 0x5000
#define BUTTON_PIO_SPAN 16
#define BUTTON_PIO_END 0x500f
#define BUTTON_PIO_IRQ 0
#define BUTTON_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define BUTTON_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BUTTON_PIO_CAPTURE 1
#define BUTTON_PIO_DATA_WIDTH 1
#define BUTTON_PIO_DO_TEST_BENCH_WIRING 0
#define BUTTON_PIO_DRIVEN_SIM_VALUE 0
#define BUTTON_PIO_EDGE_TYPE FALLING
#define BUTTON_PIO_FREQ 50000000
#define BUTTON_PIO_HAS_IN 1
#define BUTTON_PIO_HAS_OUT 0
#define BUTTON_PIO_HAS_TRI 0
#define BUTTON_PIO_IRQ_TYPE EDGE
#define BUTTON_PIO_RESET_VALUE 0


#endif /* _ALTERA_SYSTEM_H_ */
